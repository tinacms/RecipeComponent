"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _BB26STNRcjs = require('../__chunks/BB26STNR.cjs');


var _XHEEGBWUcjs = require('../__chunks/XHEEGBWU.cjs');
require('../__chunks/BBHOBWVO.cjs');
require('../__chunks/2P3WACML.cjs');
require('../__chunks/UJOJUNIC.cjs');
require('../__chunks/5X5VM34K.cjs');
require('../__chunks/E3JIN4WH.cjs');
require('../__chunks/EPHIWWY3.cjs');
require('../__chunks/XFOTDXSH.cjs');
require('../__chunks/T3QB4FR3.cjs');




var _MFAH5VLWcjs = require('../__chunks/MFAH5VLW.cjs');



var _TM5Y6AJUcjs = require('../__chunks/TM5Y6AJU.cjs');
require('../__chunks/FDRJDQ5Y.cjs');




var _7EQBAZ46cjs = require('../__chunks/7EQBAZ46.cjs');

// src/combobox/combobox-cancel.tsx
var _misc = require('@ariakit/core/utils/misc');
var _react = require('react');
var _jsxruntime = require('react/jsx-runtime');
var TagName = "button";
var children = /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
  "svg",
  {
    "aria-hidden": "true",
    display: "block",
    viewBox: "0 0 16 16",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: 1.5,
    width: "1em",
    height: "1em",
    pointerEvents: "none",
    children: [
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "line", { x1: "5", y1: "5", x2: "11", y2: "11" }),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "line", { x1: "5", y1: "11", x2: "11", y2: "5" })
    ]
  }
);
var useComboboxCancel = _MFAH5VLWcjs.createHook.call(void 0, 
  function useComboboxCancel2(_a) {
    var _b = _a, { store, hideWhenEmpty } = _b, props = _7EQBAZ46cjs.__objRest.call(void 0, _b, ["store", "hideWhenEmpty"]);
    const context = _BB26STNRcjs.useComboboxProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "ComboboxCancel must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const onClickProp = props.onClick;
    const onClick = _TM5Y6AJUcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented) return;
      store == null ? void 0 : store.setValue("");
      store == null ? void 0 : store.move(null);
    });
    const comboboxId = store.useState((state) => {
      var _a2;
      return (_a2 = state.baseElement) == null ? void 0 : _a2.id;
    });
    const empty = store.useState((state) => state.value === "");
    props = _TM5Y6AJUcjs.useWrapElement.call(void 0, 
      props,
      (element) => {
        if (!hideWhenEmpty) return element;
        if (empty) return /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _react.Fragment, {});
        return element;
      },
      [hideWhenEmpty, empty]
    );
    props = _7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {
      children,
      "aria-label": "Clear input",
      // This aria-controls will ensure the combobox popup remains visible when
      // this element gets focused. This logic is done in the ComboboxPopover
      // component.
      "aria-controls": comboboxId
    }, props), {
      onClick
    });
    props = _XHEEGBWUcjs.useButton.call(void 0, props);
    return props;
  }
);
var ComboboxCancel = _MFAH5VLWcjs.forwardRef.call(void 0, function ComboboxCancel2(props) {
  const htmlProps = useComboboxCancel(props);
  return _MFAH5VLWcjs.createElement.call(void 0, TagName, htmlProps);
});



exports.ComboboxCancel = ComboboxCancel; exports.useComboboxCancel = useComboboxCancel;
