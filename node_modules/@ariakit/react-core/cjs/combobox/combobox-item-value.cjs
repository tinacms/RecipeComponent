"use strict";Object.defineProperty(exports, "__esModule", {value: true});


var _BB26STNRcjs = require('../__chunks/BB26STNR.cjs');
require('../__chunks/2P3WACML.cjs');
require('../__chunks/UJOJUNIC.cjs');
require('../__chunks/5X5VM34K.cjs');
require('../__chunks/E3JIN4WH.cjs');
require('../__chunks/EPHIWWY3.cjs');




var _MFAH5VLWcjs = require('../__chunks/MFAH5VLW.cjs');


var _Y7UE4JBRcjs = require('../__chunks/Y7UE4JBR.cjs');
require('../__chunks/TM5Y6AJU.cjs');
require('../__chunks/FDRJDQ5Y.cjs');



var _7EQBAZ46cjs = require('../__chunks/7EQBAZ46.cjs');

// src/combobox/combobox-item-value.tsx
var _array = require('@ariakit/core/utils/array');



var _misc = require('@ariakit/core/utils/misc');
var _react = require('react');
var _jsxruntime = require('react/jsx-runtime');
var TagName = "span";
function normalizeValue(value) {
  return _misc.normalizeString.call(void 0, value).toLowerCase();
}
function getOffsets(string, values) {
  const offsets = [];
  for (const value of values) {
    let pos = 0;
    const length = value.length;
    while (string.indexOf(value, pos) !== -1) {
      const index = string.indexOf(value, pos);
      if (index !== -1) {
        offsets.push([index, length]);
      }
      pos = index + 1;
    }
  }
  return offsets;
}
function filterOverlappingOffsets(offsets) {
  return offsets.filter(([offset, length], i, arr) => {
    return !arr.some(
      ([o, l], j) => j !== i && o <= offset && o + l >= offset + length
    );
  });
}
function sortOffsets(offsets) {
  return offsets.sort(([a], [b]) => a - b);
}
function splitValue(itemValue, userValue) {
  if (!itemValue) return itemValue;
  if (!userValue) return itemValue;
  const userValues = _array.toArray.call(void 0, userValue).filter(Boolean).map(normalizeValue);
  const parts = [];
  const span = (value, autocomplete = false) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, 
    "span",
    {
      "data-autocomplete-value": autocomplete ? "" : void 0,
      "data-user-value": autocomplete ? void 0 : "",
      children: value
    },
    parts.length
  );
  const offsets = sortOffsets(
    filterOverlappingOffsets(
      // Convert userValues into a set to avoid duplicates
      getOffsets(normalizeValue(itemValue), new Set(userValues))
    )
  );
  if (!offsets.length) {
    parts.push(span(itemValue, true));
    return parts;
  }
  const [firstOffset] = offsets[0];
  const values = [
    itemValue.slice(0, firstOffset),
    ...offsets.flatMap(([offset, length], i) => {
      var _a;
      const value = itemValue.slice(offset, offset + length);
      const nextOffset = (_a = offsets[i + 1]) == null ? void 0 : _a[0];
      const nextValue = itemValue.slice(offset + length, nextOffset);
      return [value, nextValue];
    })
  ];
  values.forEach((value, i) => {
    if (!value) return;
    parts.push(span(value, i % 2 === 0));
  });
  return parts;
}
var useComboboxItemValue = _MFAH5VLWcjs.createHook.call(void 0, function useComboboxItemValue2(_a) {
  var _b = _a, { store, value, userValue } = _b, props = _7EQBAZ46cjs.__objRest.call(void 0, _b, ["store", "value", "userValue"]);
  const context = _BB26STNRcjs.useComboboxScopedContext.call(void 0, );
  store = store || context;
  const itemContext = _react.useContext.call(void 0, _BB26STNRcjs.ComboboxItemValueContext);
  const itemValue = value != null ? value : itemContext;
  const inputValue = _Y7UE4JBRcjs.useStoreState.call(void 0, store, (state) => userValue != null ? userValue : state == null ? void 0 : state.value);
  const children = _react.useMemo.call(void 0, () => {
    if (!itemValue) return;
    if (!inputValue) return itemValue;
    return splitValue(itemValue, inputValue);
  }, [itemValue, inputValue]);
  props = _7EQBAZ46cjs.__spreadValues.call(void 0, {
    children
  }, props);
  return _misc.removeUndefinedValues.call(void 0, props);
});
var ComboboxItemValue = _MFAH5VLWcjs.forwardRef.call(void 0, function ComboboxItemValue2(props) {
  const htmlProps = useComboboxItemValue(props);
  return _MFAH5VLWcjs.createElement.call(void 0, TagName, htmlProps);
});



exports.ComboboxItemValue = ComboboxItemValue; exports.useComboboxItemValue = useComboboxItemValue;
