"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _KGTSEO6Icjs = require('../__chunks/KGTSEO6I.cjs');


var _EVFHZIIBcjs = require('../__chunks/EVFHZIIB.cjs');
require('../__chunks/EPRWVKEC.cjs');
require('../__chunks/UJOJUNIC.cjs');


var _XFOTDXSHcjs = require('../__chunks/XFOTDXSH.cjs');
require('../__chunks/T3QB4FR3.cjs');





var _MFAH5VLWcjs = require('../__chunks/MFAH5VLW.cjs');


var _TM5Y6AJUcjs = require('../__chunks/TM5Y6AJU.cjs');
require('../__chunks/FDRJDQ5Y.cjs');




var _7EQBAZ46cjs = require('../__chunks/7EQBAZ46.cjs');

// src/form/form-input.tsx
var _misc = require('@ariakit/core/utils/misc');
var TagName = "input";
var useFormInput = _MFAH5VLWcjs.createHook.call(void 0, 
  function useFormInput2(_a) {
    var _b = _a, { store, name: nameProp } = _b, props = _7EQBAZ46cjs.__objRest.call(void 0, _b, ["store", "name"]);
    const context = _EVFHZIIBcjs.useFormContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "FormInput must be wrapped in a Form component."
    );
    const name = `${nameProp}`;
    const onChangeProp = props.onChange;
    const onChange = _TM5Y6AJUcjs.useEvent.call(void 0, (event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented) return;
      store == null ? void 0 : store.setValue(name, event.target.value);
    });
    const value = store.useValue(name);
    props = _7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {
      value
    }, props), {
      onChange
    });
    props = _XFOTDXSHcjs.useFocusable.call(void 0, props);
    props = _KGTSEO6Icjs.useFormControl.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, { store, name }, props));
    return props;
  }
);
var FormInput = _MFAH5VLWcjs.memo.call(void 0, 
  _MFAH5VLWcjs.forwardRef.call(void 0, function FormInput2(props) {
    const htmlProps = useFormInput(props);
    return _MFAH5VLWcjs.createElement.call(void 0, TagName, htmlProps);
  })
);



exports.FormInput = FormInput; exports.useFormInput = useFormInput;
