"use strict";Object.defineProperty(exports, "__esModule", {value: true});


var _JXWSXYURcjs = require('../__chunks/JXWSXYUR.cjs');


var _EPRWVKECcjs = require('../__chunks/EPRWVKEC.cjs');
require('../__chunks/2P3WACML.cjs');
require('../__chunks/UJOJUNIC.cjs');


var _DLUVLUIWcjs = require('../__chunks/DLUVLUIW.cjs');
require('../__chunks/E3JIN4WH.cjs');
require('../__chunks/EPHIWWY3.cjs');


var _XFOTDXSHcjs = require('../__chunks/XFOTDXSH.cjs');
require('../__chunks/T3QB4FR3.cjs');




var _MFAH5VLWcjs = require('../__chunks/MFAH5VLW.cjs');


var _VZG3Q4VAcjs = require('../__chunks/VZG3Q4VA.cjs');


var _Y7UE4JBRcjs = require('../__chunks/Y7UE4JBR.cjs');





var _TM5Y6AJUcjs = require('../__chunks/TM5Y6AJU.cjs');
require('../__chunks/FDRJDQ5Y.cjs');




var _7EQBAZ46cjs = require('../__chunks/7EQBAZ46.cjs');

// src/tab/tab-panel.tsx
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
var _react = require('react');
var _jsxruntime = require('react/jsx-runtime');
var TagName = "div";
var useTabPanel = _MFAH5VLWcjs.createHook.call(void 0, 
  function useTabPanel2(_a) {
    var _b = _a, {
      store,
      unmountOnHide,
      tabId: tabIdProp,
      getItem: getItemProp,
      scrollRestoration,
      scrollElement
    } = _b, props = _7EQBAZ46cjs.__objRest.call(void 0, _b, [
      "store",
      "unmountOnHide",
      "tabId",
      "getItem",
      "scrollRestoration",
      "scrollElement"
    ]);
    const context = _JXWSXYURcjs.useTabProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "TabPanel must receive a `store` prop or be wrapped in a TabProvider component."
    );
    const ref = _react.useRef.call(void 0, null);
    const id = _TM5Y6AJUcjs.useId.call(void 0, props.id);
    const tabId = _Y7UE4JBRcjs.useStoreState.call(void 0, 
      store.panels,
      () => {
        var _a2;
        return tabIdProp || ((_a2 = store == null ? void 0 : store.panels.item(id)) == null ? void 0 : _a2.tabId);
      }
    );
    const open = _Y7UE4JBRcjs.useStoreState.call(void 0, 
      store,
      (state) => !!tabId && state.selectedId === tabId
    );
    const disclosure = _VZG3Q4VAcjs.useDisclosureStore.call(void 0, { open });
    const mounted = _Y7UE4JBRcjs.useStoreState.call(void 0, disclosure, "mounted");
    const scrollPositionRef = _react.useRef.call(void 0, 
      /* @__PURE__ */ new Map()
    );
    const getScrollElement = _TM5Y6AJUcjs.useEvent.call(void 0, () => {
      const panelElement = ref.current;
      if (!panelElement) return null;
      if (!scrollElement) return panelElement;
      if (typeof scrollElement === "function") {
        return scrollElement(panelElement);
      }
      if ("current" in scrollElement) {
        return scrollElement.current;
      }
      return scrollElement;
    });
    _react.useEffect.call(void 0, () => {
      var _a2, _b2;
      if (!scrollRestoration) return;
      if (!mounted) return;
      const element = getScrollElement();
      if (!element) return;
      if (scrollRestoration === "reset") {
        element.scroll(0, 0);
        return;
      }
      if (!tabId) return;
      const position = scrollPositionRef.current.get(tabId);
      element.scroll((_a2 = position == null ? void 0 : position.x) != null ? _a2 : 0, (_b2 = position == null ? void 0 : position.y) != null ? _b2 : 0);
      const onScroll = () => {
        scrollPositionRef.current.set(tabId, {
          x: element.scrollLeft,
          y: element.scrollTop
        });
      };
      element.addEventListener("scroll", onScroll);
      return () => {
        element.removeEventListener("scroll", onScroll);
      };
    }, [scrollRestoration, mounted, tabId, getScrollElement, store]);
    const [hasTabbableChildren, setHasTabbableChildren] = _react.useState.call(void 0, false);
    _react.useEffect.call(void 0, () => {
      const element = ref.current;
      if (!element) return;
      const tabbable = _focus.getAllTabbableIn.call(void 0, element);
      setHasTabbableChildren(!!tabbable.length);
    }, []);
    const getItem = _react.useCallback.call(void 0, 
      (item) => {
        const nextItem = _7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {}, item), { id: id || item.id, tabId: tabIdProp });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, tabIdProp, getItemProp]
    );
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = _TM5Y6AJUcjs.useEvent.call(void 0, (event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented) return;
      if (!(store == null ? void 0 : store.composite)) return;
      const keyMap = {
        ArrowLeft: store.previous,
        ArrowRight: store.next,
        Home: store.first,
        End: store.last
      };
      const action = keyMap[event.key];
      if (!action) return;
      const { selectedId } = store.getState();
      const nextId = action({ activeId: selectedId });
      if (!nextId) return;
      event.preventDefault();
      store.move(nextId);
    });
    props = _TM5Y6AJUcjs.useWrapElement.call(void 0, 
      props,
      (element) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, _JXWSXYURcjs.TabScopedContextProvider, { value: store, children: element }),
      [store]
    );
    props = _7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {
      id,
      role: "tabpanel",
      "aria-labelledby": tabId || void 0
    }, props), {
      children: unmountOnHide && !mounted ? null : props.children,
      ref: _TM5Y6AJUcjs.useMergeRefs.call(void 0, ref, props.ref),
      onKeyDown
    });
    props = _XFOTDXSHcjs.useFocusable.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, {
      // If the tab panel is rendered as part of another composite widget such
      // as combobox, it should not be focusable.
      focusable: !store.composite && !hasTabbableChildren
    }, props));
    props = _DLUVLUIWcjs.useDisclosureContent.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, { store: disclosure }, props));
    props = _EPRWVKECcjs.useCollectionItem.call(void 0, _7EQBAZ46cjs.__spreadProps.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, { store: store.panels }, props), { getItem }));
    return props;
  }
);
var TabPanel = _MFAH5VLWcjs.forwardRef.call(void 0, function TabPanel2(props) {
  const htmlProps = useTabPanel(props);
  return _MFAH5VLWcjs.createElement.call(void 0, TagName, htmlProps);
});



exports.TabPanel = TabPanel; exports.useTabPanel = useTabPanel;
