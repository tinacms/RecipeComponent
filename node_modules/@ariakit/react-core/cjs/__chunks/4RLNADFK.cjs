"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _LSQ5XROEcjs = require('./LSQ5XROE.cjs');


var _E3JIN4WHcjs = require('./E3JIN4WH.cjs');




var _MFAH5VLWcjs = require('./MFAH5VLW.cjs');



var _7EQBAZ46cjs = require('./7EQBAZ46.cjs');

// src/dialog/dialog-disclosure.tsx
var _dom = require('@ariakit/core/utils/dom');
var _misc = require('@ariakit/core/utils/misc');
var TagName = "button";
var useDialogDisclosure = _MFAH5VLWcjs.createHook.call(void 0, 
  function useDialogDisclosure2(_a) {
    var _b = _a, { store } = _b, props = _7EQBAZ46cjs.__objRest.call(void 0, _b, ["store"]);
    const context = _E3JIN4WHcjs.useDialogProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "DialogDisclosure must receive a `store` prop or be wrapped in a DialogProvider component."
    );
    const contentElement = store.useState("contentElement");
    props = _7EQBAZ46cjs.__spreadValues.call(void 0, {
      "aria-haspopup": _dom.getPopupRole.call(void 0, contentElement, "dialog")
    }, props);
    props = _LSQ5XROEcjs.useDisclosure.call(void 0, _7EQBAZ46cjs.__spreadValues.call(void 0, { store }, props));
    return props;
  }
);
var DialogDisclosure = _MFAH5VLWcjs.forwardRef.call(void 0, function DialogDisclosure2(props) {
  const htmlProps = useDialogDisclosure(props);
  return _MFAH5VLWcjs.createElement.call(void 0, TagName, htmlProps);
});




exports.useDialogDisclosure = useDialogDisclosure; exports.DialogDisclosure = DialogDisclosure;
