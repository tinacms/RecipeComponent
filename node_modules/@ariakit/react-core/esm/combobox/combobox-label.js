"use client";
import {
  useComboboxProviderContext
} from "../__chunks/3LH6HMTR.js";
import "../__chunks/APGXEJ2Q.js";
import "../__chunks/G4PVPWEW.js";
import "../__chunks/COWZSPJ7.js";
import "../__chunks/CMXOY7UW.js";
import "../__chunks/JDEWEW7S.js";
import {
  createElement,
  createHook,
  forwardRef,
  memo
} from "../__chunks/7FZLUSKW.js";
import "../__chunks/HNHAUIIY.js";
import "../__chunks/SK3NAZA3.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/3YLGPPWQ.js";

// src/combobox/combobox-label.tsx
import { invariant, removeUndefinedValues } from "@ariakit/core/utils/misc";
var TagName = "label";
var useComboboxLabel = createHook(
  function useComboboxLabel2(_a) {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useComboboxProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxLabel must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const comboboxId = store.useState((state) => {
      var _a2;
      return (_a2 = state.baseElement) == null ? void 0 : _a2.id;
    });
    props = __spreadValues({
      htmlFor: comboboxId
    }, props);
    return removeUndefinedValues(props);
  }
);
var ComboboxLabel = memo(
  forwardRef(function ComboboxLabel2(props) {
    const htmlProps = useComboboxLabel(props);
    return createElement(TagName, htmlProps);
  })
);
export {
  ComboboxLabel,
  useComboboxLabel
};
