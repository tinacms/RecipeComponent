"use client";
import {
  usePopoverDisclosure
} from "../__chunks/QE62MSCL.js";
import "../__chunks/35RDKJF6.js";
import "../__chunks/RM6VCCZ7.js";
import "../__chunks/NWYOIOBE.js";
import "../__chunks/JOBHIYEN.js";
import {
  useCompositeItem
} from "../__chunks/NSB34BGG.js";
import "../__chunks/SZHY72KI.js";
import "../__chunks/ZHUQ44XA.js";
import "../__chunks/5VQZOHHZ.js";
import "../__chunks/APGXEJ2Q.js";
import "../__chunks/G4PVPWEW.js";
import "../__chunks/COWZSPJ7.js";
import "../__chunks/CMXOY7UW.js";
import "../__chunks/JDEWEW7S.js";
import "../__chunks/Z4WWVOIF.js";
import "../__chunks/SWN3JYXT.js";
import {
  createElement,
  createHook,
  forwardRef
} from "../__chunks/7FZLUSKW.js";
import "../__chunks/CTKPPFRS.js";
import {
  useEvent,
  useMergeRefs
} from "../__chunks/HNHAUIIY.js";
import "../__chunks/SK3NAZA3.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/3YLGPPWQ.js";

// src/composite/composite-overflow-disclosure.ts
import { sync } from "@ariakit/core/utils/store";
import { useEffect, useRef, useState } from "react";
var TagName = "button";
var useCompositeOverflowDisclosure = createHook(function useCompositeOverflowDisclosure2(_a) {
  var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
  const ref = useRef(null);
  const [shouldRegisterItem, setShouldRegisterItem] = useState(false);
  useEffect(() => {
    return sync(store, ["disclosureElement"], () => {
      store.setDisclosureElement(ref.current);
    });
  }, [store]);
  const onFocusProp = props.onFocus;
  const onFocus = useEvent((event) => {
    onFocusProp == null ? void 0 : onFocusProp(event);
    if (event.defaultPrevented) return;
    setShouldRegisterItem(true);
  });
  const onBlurProp = props.onBlur;
  const onBlur = useEvent((event) => {
    onBlurProp == null ? void 0 : onBlurProp(event);
    if (event.defaultPrevented) return;
    setShouldRegisterItem(false);
  });
  props = __spreadProps(__spreadValues({
    "aria-hidden": !shouldRegisterItem
  }, props), {
    ref: useMergeRefs(props.ref, ref),
    onFocus,
    onBlur
  });
  props = useCompositeItem(__spreadProps(__spreadValues({}, props), { shouldRegisterItem }));
  props = usePopoverDisclosure(__spreadValues({ store }, props));
  return props;
});
var CompositeOverflowDisclosure = forwardRef(
  function CompositeOverflowDisclosure2(props) {
    const htmlProps = useCompositeOverflowDisclosure(props);
    return createElement(TagName, htmlProps);
  }
);
export {
  CompositeOverflowDisclosure,
  useCompositeOverflowDisclosure
};
